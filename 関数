-----------------------------------------
// 朝のあいさつを出力する関数を作成する
const sayGoodMorning = () => {
  console.log('おはようございます！');
  console.log('昨日はよく眠れましたか？');
  console.log('今日も一日頑張りましょう！');
}

// 関数を呼び出す（1回目）
sayGoodMorning();

// 関数を呼び出す（2回目）
sayGoodMorning();
-----------------------------------------
一般的に、自動販売機を使う流れは以下のとおりです。

自動販売機のイメージ

お金を入れ、商品を選んで受け取り、お釣りがあれば排出するというシンプルな処理です。
この流れは、基本的に誰が利用しても同じです。

そこで、これらの処理を関数として1つにまとめ、再利用しやすい形にしておきます。
そうしておくと、例えばカップラーメンの自動販売機を作ることになっても、
関数をそのまま再利用すれば簡単に開発ができるわけです。
----------------------------------------------------------------
ショッピングサイトにおける商品検索の例
Webの世界においても同じようなケースはたくさんあります。
例えばAmazonや楽天のようなショッピングサイトで商品を検索するシーンをイメージしてください。

一般的に、検索を利用する流れは以下のとおりです。

ショッピングサイトのイメージ

検索したい商品のキーワードを入力すると、
データベースにアクセスして結果を表示してくれます。
この流れも、基本的に誰が利用しても同じです。

そこで、この一連の処理を関数として1つにまとめておけば、
例えば新しくレストランを検索する機能が欲しいときにも、
関数を再利用して素早く開発できるようになります。

関数のメリットをまとめると以下のようになります。

複雑なコードを1つにまとめられる
同じ処理を行うときに何度でも再利用できる
プログラミングの生産性を高め、素早い開発ができるようになる
--------------------------------------------------------------------
